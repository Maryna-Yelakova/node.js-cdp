[{"C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\index.ts":"1","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\middlewares\\middleware.ts":"2","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\models\\User.ts":"3","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\router\\handlers\\user-handler.ts":"4","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\services\\users.ts":"5","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\validation\\user-schema.ts":"6","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\database-models\\connection.ts":"7","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\database-models\\GroupModel.ts":"8","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\database-models\\index.ts":"9","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\database-models\\UserGroupModel.ts":"10","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\database-models\\UserModel.ts":"11","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\initialization.ts":"12","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\models\\Group.ts":"13","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\router\\handlers\\group-handler.ts":"14","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\router\\index.ts":"15","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\services\\group-service.ts":"16","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\services\\user-service.ts":"17"},{"size":248,"mtime":1580475083650,"results":"18","hashOfConfig":"19"},{"size":491,"mtime":1580048610148,"results":"20","hashOfConfig":"19"},{"size":131,"mtime":1580048610148,"results":"21","hashOfConfig":"19"},{"size":2153,"mtime":1581627002842,"results":"22","hashOfConfig":"19"},{"size":1046,"mtime":1580048610151,"results":"23","hashOfConfig":"19"},{"size":304,"mtime":1580078519353,"results":"24","hashOfConfig":"19"},{"size":271,"mtime":1580473698036,"results":"25","hashOfConfig":"19"},{"size":1111,"mtime":1582064815879,"results":"26","hashOfConfig":"19"},{"size":362,"mtime":1581437572084,"results":"27","hashOfConfig":"19"},{"size":558,"mtime":1581625018272,"results":"28","hashOfConfig":"19"},{"size":1137,"mtime":1582064815869,"results":"29","hashOfConfig":"19"},{"size":390,"mtime":1580474797519,"results":"30","hashOfConfig":"19"},{"size":180,"mtime":1581434253158,"results":"31","hashOfConfig":"19"},{"size":1808,"mtime":1581627695067,"results":"32","hashOfConfig":"19"},{"size":1110,"mtime":1581627002791,"results":"33","hashOfConfig":"19"},{"size":577,"mtime":1581627107010,"results":"34","hashOfConfig":"19"},{"size":579,"mtime":1581625858094,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"beo3ip",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},"C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\index.ts",[],"C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\middlewares\\middleware.ts",[],"C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\models\\User.ts",[],"C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\router\\handlers\\user-handler.ts",["75"],"import { User } from '../../models/User';\r\nimport userService from '../../services/user-service';\r\n\r\nexport const userHandler = {\r\n    getUsers: (req, res) => {\r\n        const data = userService.getUsers().then(r => {\r\n            console.log(r, \"ALLL\")\r\n        });\r\n        if (data) {\r\n            res.status(200).send(data);\r\n        } else {\r\n            res.status(400).send('Bad Request');\r\n        }\r\n    },\r\n    getUserById: (req, res) => {\r\n        const { id } = req.params;\r\n        const user = userService.getUserById(id);\r\n        if (user) {\r\n            res.status(200).send(user);\r\n        } else {\r\n            res.status(400).send('Bad Request');\r\n        }\r\n    },\r\n    setUser: (req, res) => {\r\n        const data: User = req.body;\r\n        userService.addUser(data);\r\n        if (data) {\r\n            res.status(200).send(`${data.login} user has been created successfully`);\r\n        } else {\r\n            res.status(400).send('Bad Request');\r\n        }\r\n    },\r\n    editUser: (req, res) => {\r\n        const data = req.body;\r\n        const { id } = req.params;\r\n        userService.editUser(id, data);\r\n        if (data && id) {\r\n            res.status(200).send(`${data.login} user has been updated successfully`);\r\n        } else {\r\n            res.status(400).send('Bad Request');\r\n        }\r\n    },\r\n    deleteUser: (req, res) => {\r\n        const { id } = req.params;\r\n        userService.deleteUser(id);\r\n        if (id) {\r\n            res.status(200).send(`user has been deleted successfully`);\r\n        } else {\r\n            res.status(400).send('Bad Request');\r\n        }\r\n    },\r\n    getGroups: (req, res) => {\r\n       const users = userService.getGroups();\r\n        if (users) {\r\n            res.status(200).send(users);\r\n        } else {\r\n            res.status(400).send('Bad Request');\r\n        }\r\n    },\r\n    addGroup: (req, res) => {\r\n        const group  = req.body;\r\n        userService.addGroup(group.id);\r\n        if (group) {\r\n            res.status(200).send(`${group} group to user has been created successfully`);\r\n        } else {\r\n            res.status(400).send('Bad Request');\r\n        }\r\n    }\r\n\r\n};\r\n","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\services\\users.ts",["76"],"import { User } from '../models/User';\r\n\r\nexport class Users {\r\n    private users: Array<User> = [];\r\n\r\n    public getUsers (loginSubstring: string): Array<User> {\r\n        if(loginSubstring){\r\n            return this.users.filter(user => !user.isDeleted && user.login.indexOf(loginSubstring) !== -1);\r\n        }else{\r\n            return this.users.filter(user => !user.isDeleted);\r\n        }\r\n\r\n    }\r\n\r\n    public getUser(id: string): User | undefined {\r\n        return this.users.find((user: User) => user.id == id);\r\n    }\r\n\r\n    public setUser(userData: User) {\r\n        this.users.push(userData);\r\n    }\r\n\r\n    public editUser(id: string, data: User): void {\r\n        const i = this.users.findIndex(user => user.id === id);\r\n        if (i !== -1) {\r\n            this.users.splice(i,1,data);\r\n        }\r\n    }\r\n\r\n    public deleteUser(id: string): void {\r\n        this.users.map((user: User) => {\r\n            if(user.id === id){\r\n                user.isDeleted = true;\r\n            }\r\n            return this.users;\r\n        });\r\n    }\r\n}\r\n","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\validation\\user-schema.ts",[],"C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\database-models\\connection.ts",[],"C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\database-models\\GroupModel.ts",["77"],"C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\database-models\\index.ts",[],"C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\database-models\\UserGroupModel.ts",[],"C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\database-models\\UserModel.ts",["78"],"C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\initialization.ts",[],"C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\models\\Group.ts",[],"C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\router\\handlers\\group-handler.ts",["79"],"import { Group } from '../../models/Group';\r\nimport groupService from '../../services/group-service';\r\n\r\nexport const groupHandler = {\r\n    getGroups: (req, res) => {\r\n        const data = groupService.getGroups();\r\n        if (data) {\r\n            res.status(200).send(data);\r\n        } else {\r\n            res.status(400).send('Bad Request');\r\n        }\r\n    },\r\n    getGroupById: (req, res) => {\r\n        const { id } = req.params;\r\n        const group = groupService.getGroupById(id);\r\n        if (group) {\r\n            res.status(200).send(group);\r\n        } else {\r\n            res.status(400).send('Bad Request');\r\n        }\r\n    },\r\n    setGroup: (req, res) => {\r\n        const data: Group = req.body;\r\n        groupService.addGroup(data);\r\n        if (data) {\r\n            res.status(200).send(`${data.name} group has been created successfully`);\r\n        } else {\r\n            res.status(400).send('Bad Request');\r\n        }\r\n    },\r\n    editGroup: (req, res) => {\r\n        const data = req.body;\r\n        const { id } = req.params;\r\n        groupService.editGroup(id, data);\r\n        if (data && id) {\r\n            res.status(200).send(`${data.name} group has been updated successfully`);\r\n        } else {\r\n            res.status(400).send('Bad Request');\r\n        }\r\n    },\r\n    deleteGroup: (req, res) => {\r\n        const { id } = req.params;\r\n        groupService.deleteGroup(id);\r\n        if (id) {\r\n            res.status(200).send(`group has been deleted successfully`);\r\n        } else {\r\n            res.status(400).send('Bad Request');\r\n        }\r\n    },\r\n    getUsers: (req,res) => {\r\n        const data = groupService.getUsers();\r\n        if (data) {\r\n            res.status(200).send(data);\r\n        } else {\r\n            res.status(400).send('Bad Request');\r\n        }\r\n    }\r\n\r\n};\r\n","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\router\\index.ts",[],"C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\services\\group-service.ts",["80"],"import models from '../database-models/index';\r\nimport { Group } from '../models/Group';\r\nimport { User } from '../models/User';\r\n\r\nconst groupService = {\r\n    getGroups: () => models.Group.getGroups(),\r\n    getGroupById : (id: string) => models.Group.findById(id),\r\n    addGroup: (data: Group) => models.Group.addGroup(data),\r\n    editGroup: (id: string, data: Group) => models.Group.editGroup(id, data),\r\n    deleteGroup: (id: string) => models.Group.deleteGroup(id),\r\n\r\n    getUsers: () => models.Group.findAll({include: [{model: User}]})\r\n};\r\n\r\nexport default groupService;","C:\\Users\\Maryna_Yelakova\\node.js-cdp\\beckend\\services\\user-service.ts",["81"],"import models from '../database-models/index';\r\nimport { User } from '../models/User';\r\n\r\nconst userService = {\r\n    getUsers: () => models.User.getUsers(),\r\n    getUserById : (id: string) => models.User.findById(id),\r\n    addUser: (data: User) => models.User.addUser(data),\r\n    editUser: (id: string, data: User) => models.User.editUser(id, data),\r\n    deleteUser: (id: string) => models.User.deleteUser(id),\r\n    //sequelize generated methods\r\n    getGroups: () => models.User.getGroups(),\r\n    addGroup: group => models.User.addGroup(group)\r\n};\r\n\r\nexport default userService;",{"ruleId":"82","severity":2,"message":"83","line":1,"column":10,"nodeType":"84","endLine":1,"endColumn":14},{"ruleId":"82","severity":2,"message":"83","line":1,"column":10,"nodeType":"84","endLine":1,"endColumn":14},{"ruleId":"82","severity":2,"message":"85","line":1,"column":10,"nodeType":"84","endLine":1,"endColumn":15},{"ruleId":"82","severity":2,"message":"83","line":1,"column":10,"nodeType":"84","endLine":1,"endColumn":14},{"ruleId":"82","severity":2,"message":"85","line":1,"column":10,"nodeType":"84","endLine":1,"endColumn":15},{"ruleId":"82","severity":2,"message":"85","line":2,"column":10,"nodeType":"84","endLine":2,"endColumn":15},{"ruleId":"82","severity":2,"message":"83","line":2,"column":10,"nodeType":"84","endLine":2,"endColumn":14},"no-unused-vars","'User' is defined but never used.","Identifier","'Group' is defined but never used."]